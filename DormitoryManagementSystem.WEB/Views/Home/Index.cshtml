@model IEnumerable<Dormitory>

<!DOCTYPE html>
<html lang="tr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Yurt Yönetim Sistemi - AI Chat Assistant</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>


        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        .card-body{
            background: linear-gradient(to right, #d8b9f5 0%, #88e1f2 50%, #4facfe 100%);
        
        }
        .container {
            padding: 2rem;
            max-width: 1400px;
            margin: 0 auto;
        }

        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 10px 20px rgba(0,0,0,0.1);
            background: linear-gradient(to right, #d8b9f5 0%, #88e1f2 50%, #4facfe 100%);
            margin-bottom: 2rem;
        }

        .card-header {
            background: linear-gradient(to bottom right, #6a11cb 0%, #2575fc 100%);
            color: white;
            border-radius: 15px 15px 0 0 !important;
            padding: 1.5rem;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            padding: 1.5rem;
        }

        .stat-card {
            background: white;
            border-radius: 10px;
            padding: 1rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }

        .chat-container {
            height: 500px;
            overflow-y: auto;
            padding: 1.5rem;
            background: linear-gradient(to right, #d8b9f5 0%, #88e1f2 50%, #4facfe 100%);
            
            border-radius: 12px;
        }

        .card-container{
            background: linear-gradient(to right, #d8b9f5 0%, #88e1f2 50%, #4facfe 100%);
        }
        .chat-message {
            padding: 1rem 1.5rem;
            margin-bottom: 1rem;
            border-radius: 15px;
            max-width: 80%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .user-message {
            background: linear-gradient(45deg, #4b6cb7 0%, #182848 100%);
            color: white;
            margin-left: auto;
        }

        .ai-message {
            background: #f8f9fa;
            margin-right: auto;
        }

        .chat-input {
            margin-top: 1.5rem;
            position: relative;
        }

            .chat-input input {
                width: 100%;
                padding: 1rem 1.5rem;
                border: 2px solid #e9ecef;
                border-radius: 25px;
                font-size: 1rem;
            }

            .chat-input button {
                position: absolute;
                right: 5px;
                top: 50%;
                transform: translateY(-50%);
                background: linear-gradient(45deg, #4b6cb7 0%, #182848 100%);
                color: white;
                border: none;
                padding: 0.8rem 2rem;
                border-radius: 20px;
            }

        .typing-indicator {
            padding: 1rem;
            color: #6c757d;
            font-style: italic;
        }

        .ai-guide-button {
            position: fixed;
            top: 20px;
            right: 20px;
            z-index: 1000;
        }

        .guide-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(45deg, #4b6cb7 0%, #182848 100%);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            cursor: pointer;
            box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        }

        .guide-content {
            position: absolute;
            right: 50px;
            top: 0;
            width: 800px;
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            opacity: 0;
            visibility: hidden;
            transform: translateX(20px);
            transition: all 0.3s ease;
            max-height: 500px; /* İçeriğin yüksekliğini sınırlayın, ihtiyaca göre ayarlayabilirsiniz */
            overflow-y: auto; /* Dikey kaydırma çubuğu ekler */
        }


            .guide-content h4 {
                color: #182848;
                margin-bottom: 15px;
                font-size: 18px;
            }

            .guide-content ul {
                list-style: none;
                padding: 0;
            }

            .guide-content li {
                margin-bottom: 10px;
                color: #666;
                font-size: 14px;
                line-height: 1.4;
            }

        .ai-guide-button:hover .guide-content {
            opacity: 1;
            visibility: visible;
            transform: translateX(0);
        }

    </style>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">Yurt Doluluk Oranları</h3>
                    </div>

                    <div class="card-body">
                        <div class="stats-grid">
                            @foreach (var dormitory in Model)
                            {
                                <div class="stat-card">
                                    <h5>@dormitory.DormitoryName</h5>
                                    <canvas id="chart-@dormitory.DormitoryID"></canvas>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-header">
                        <h3 class="mb-0">AI Chat Assistant</h3>
                    </div>
                    <div class="card-body">
                        <div class="chat-container">
                            <div id="chatMessages"></div>
                        </div>
                        <div class="chat-input">
                            <form id="chatForm" asp-controller="AI" asp-action="AiChat">
                                <input type="text"
                                       id="userInput"
                                       name="UserMessage"
                                       placeholder="Kariyerle ilgili bir şey sorun..."
                                       required>
                                <button type="submit">Gönder</button>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

  <div class="ai-guide-button">
    <span class="guide-icon">?</span>
    <div class="guide-content">
        <h4>AI Asistan Kullanım Kılavuzu</h4>
        <ul>
            <li><strong>1. Temel Kullanım</strong></li>
            <ul>
                <li>Yurtlar hakkında detaylı bilgi almak için sadece yurt adı veya adresi gibi kelimelerle soru sorabilirsiniz. Örneğin:</li>
                <li>"Muhammed Fatih Safitürk Yurdu hakkında bilgi verir misin?"</li>
                <li>"Yurtların adreslerini listele"</li>
                <li>Odalara Ait Bilgi Sorma: Odaların numarası, kat bilgisi veya kapasite gibi bilgilere ulaşmak için şu şekilde sorular sorabilirsiniz:</li>
                <li>"1. katın odalarını listele"</li>
                <li>"Oda 101'in kapasitesi nedir?"</li>
                <li>Öğrenciler Hakkında Bilgi Sorma: Öğrencilerin isimleri, odaları ve iletişim bilgileri hakkında sorular sorabilirsiniz:</li>
                <li>"Berkay Çekmez kimdir?"</li>
                <li>"Öğrencilerin hangi odalarda kaldığını öğrenebilir miyim?"</li>
            </ul>

            <li><strong>2. Silme İşlemi Talebi</strong></li>
            <ul>
                <li>Yapay zekaya sadece veritabanındaki verilerle ilgili silme talepleri gönderebilirsiniz. Eğer veritabanında ilgili veri yoksa, sistem size bunu bildirecektir.</li>
                <li>Öğrenci Silme: "Berkay Çekmez'i sil", "Ömer isimli öğrenciyi sil"</li>
                <li>Oda Silme: "1. kat 1. odayı sil"</li>
                <li>Yurt Silme: "Muhammed Fatih Safitürk Yurdu'nu sil"</li>
            </ul>

            <li><strong>3. Yanıtlar ve Bilgiler</strong></li>
            <ul>
                <li>AI, veritabanındaki mevcut verilere dayalı olarak size geri dönüş sağlar. Yanıtlar her zaman net ve açık olacaktır. AI, sadece sizin verdiğiniz verilere dayanarak sorulara yanıt verir.</li>
                <li>ID bilgileri veya veritabanı içindeki özel bilgiler yanıt olarak verilmez. Silme işlemi için doğru bir ID verisi istenecektir.</li>
            </ul>

            <li><strong>4. Silme İşlemi Başarısı ve Hatalar</strong></li>
            <ul>
                <li>Eğer silmek istediğiniz veri sistemde varsa ve işlem başarılı olursa: "Silme işlemi başarıyla tamamlanmıştır."</li>
                <li>Eğer veri sistemde bulunmazsa: "Silmek istediğiniz veri sistemde bulunmamaktadır."</li>
            </ul>

            <li><strong>5. Hangi Veriler Kullanılabilir?</strong></li>
            <ul>
                <li>Yurt Bilgileri: Yurt adı, adresi, kapasite bilgisi, telefon numarası, doluluk oranı gibi bilgiler.</li>
                <li>Oda Bilgileri: Oda numarası, kat, kapasite, öğrenci sayısı gibi bilgiler.</li>
                <li>Öğrenci Bilgileri: Öğrencilerin isimleri, telefon numaraları, odalarındaki bilgiler gibi veriler.</li>
            </ul>

            <li><strong>6. AI’ye Ne Sorabilirim?</strong></li>
            <ul>
                <li>Yurtlar ve odalar hakkında genel bilgi alabilirsiniz.</li>
                <li>Öğrenciler ve odalarındaki konaklama bilgileri hakkında soru sorabilirsiniz.</li>
                <li>Yurtlar ve odalar arasında herhangi bir değişiklik veya düzenleme isteğinde bulunabilirsiniz.</li>
            </ul>

            <li><strong>7. Yardım ve Destek</strong></li>
            <ul>
                <li>Eğer sistemle ilgili herhangi bir sorun yaşarsanız veya daha fazla yardım almak isterseniz, aşağıdaki adımları izleyebilirsiniz:</li>
                <li>Sorununuzu net bir şekilde belirtin. AI, net ve açık sorulara daha doğru yanıtlar verecektir.</li>
                <li>Destek ekibiyle iletişime geçin. Eğer AI size yeterli yanıt veremiyorsa, sistem yöneticisi ile iletişime geçebilirsiniz.</li>
            </ul>
        </ul>
    </div>
</div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Doluluk oranları grafiklerini oluştur
        @foreach (var dormitory in Model)
{
    <text>
        new Chart(document.getElementById('chart-@dormitory.DormitoryID'), {
            type: 'doughnut',
            data: {
                labels: ['Dolu', 'Boş'],
                datasets: [{
                    data: [
                        @(dormitory.DormitoryCapacity > 0 ? Math.Round(dormitory.OccupancyRate, 2) : 0),
                        @(dormitory.DormitoryCapacity > 0 ? Math.Round(100 - dormitory.OccupancyRate, 2) : 0)
                    ],
                    backgroundColor: ['#4b6cb7', '#e9ecef'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true,
                cutout: '70%',
                plugins: {
                    legend: {
                        display: false
                    }
                }
            }
        });
    </text>
}

            // Chat fonksiyonları
            document.getElementById('chatForm').addEventListener('submit', async (e) => {
                e.preventDefault();
                const input = document.getElementById('userInput');
                const message = input.value;
                input.value = '';

                addMessage(message, 'user');
                showTypingIndicator();

                try {
                    const response = await fetch('/Home/Index', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: new URLSearchParams({ UserMessage: message })
                    });

                    if (!response.ok) {
                        throw new Error('Ağ hatası');
                    }

                    const data = await response.json();
                    removeTypingIndicator();
                    addMessage(data.response, 'ai');
                } catch (error) {
                    removeTypingIndicator();
                    addMessage('Üzgünüm, bir hata oluştu. Lütfen tekrar deneyin.', 'ai');
                }
            });

        function addMessage(message, sender) {
            const chatMessages = document.getElementById('chatMessages');
            const messageDiv = document.createElement('div');
            messageDiv.className = `chat-message ${sender}-message`;
            messageDiv.textContent = message;
            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function showTypingIndicator() {
            const chatMessages = document.getElementById('chatMessages');
            const indicator = document.createElement('div');
            indicator.className = 'typing-indicator';
            indicator.id = 'typingIndicator';
            indicator.textContent = 'AI yazıyor...';
            chatMessages.appendChild(indicator);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function removeTypingIndicator() {
            const indicator = document.getElementById('typingIndicator');
            if (indicator) {
                indicator.remove();
            }
        }
    </script>
</body>
</html>